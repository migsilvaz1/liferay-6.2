<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */
--%>

<%@page import="com.liferay.portlet.asset.service.AssetEntryLocalServiceUtil"%>
<%@page import="java.util.ArrayList"%>
<%@page import="com.liferay.portal.kernel.xml.SAXReaderUtil"%>
<%@page import="com.liferay.portlet.journal.model.JournalArticle"%>
<%@page import="com.liferay.portal.theme.ThemeDisplay"%>
<%@page import="com.liferay.portlet.journal.service.JournalArticleLocalServiceUtil"%>
<%@page import="com.liferay.portlet.asset.model.AssetEntry"%>
<%@ page import="com.liferay.portal.kernel.search.Document"%>
<%
String search = ParamUtil.getString(renderRequest, "searchPublisher");

int end = searchContainer.getEnd();
int start = searchContainer.getStart();

if (!portletName.equals(PortletKeys.RELATED_ASSETS)) {
	assetEntryQuery.setGroupIds(groupIds);
}

assetEntryQuery.setExcludeZeroViewCount(excludeZeroViewCount);
assetEntryQuery.setOrderByCol1(orderByColumn1);
assetEntryQuery.setOrderByCol2(orderByColumn2);
assetEntryQuery.setOrderByType1(orderByType1);
assetEntryQuery.setOrderByType2(orderByType2);

List<AssetEntry> results = new ArrayList<AssetEntry>();
int total = 0;
if (!portletName.equals(PortletKeys.RELATED_ASSETS) || (assetEntryQuery.getLinkedAssetEntryId() > 0)) {
	if (assetVocabularyId > 0) {
		AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.getVocabulary(assetVocabularyId);

		List<AssetCategory> assetCategories = AssetCategoryLocalServiceUtil.getVocabularyRootCategories(assetVocabulary.getVocabularyId(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);

		assetEntryQuery.setClassNameIds(classNameIds);

		for (AssetCategory assetCategory : assetCategories) {
			assetCategory = assetCategory.toEscapedModel();

			long[] oldAllCategoryIds = assetEntryQuery.getAllCategoryIds();

			long[] newAllAssetCategoryIds = ArrayUtil.append(oldAllCategoryIds, assetCategory.getCategoryId());

			assetEntryQuery.setAllCategoryIds(newAllAssetCategoryIds);

			int groupTotal = 0;

			if (PropsValues.ASSET_PUBLISHER_SEARCH_WITH_INDEX && (assetEntryQuery.getLinkedAssetEntryId() == 0) && !portletName.equals(PortletKeys.HIGHEST_RATED_ASSETS) && !portletName.equals(PortletKeys.MOST_VIEWED_ASSETS)) {
				Hits hits = AssetUtil.search(request, assetEntryQuery, start, end);

				groupTotal = hits.getLength();

				total += groupTotal;

				results = AssetUtil.getAssetEntries(hits);
			}
			else {
				groupTotal = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

				total += groupTotal;

				assetEntryQuery.setEnd(end);
				assetEntryQuery.setStart(start);

				results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
			}
			if (!results.isEmpty() && (start < groupTotal)) {
				searchContainer.setResults(results);

				request.setAttribute("view.jsp-results", results);
%>

				<h3 class="asset-entries-group-label"><%= assetCategory.getTitle(locale) %></h3>

				<c:choose>
					<c:when test="<%= portletDisplayDDMTemplateId > 0 %>">
						<%= PortletDisplayTemplateUtil.renderDDMTemplate(pageContext, portletDisplayDDMTemplateId, results, contextObjects) %>
					</c:when>
					<c:otherwise>
						<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
					</c:otherwise>
				</c:choose>

<%
	}

	if (groupTotal > 0) {
		if ((end > 0) && (end > groupTotal)) {
			end -= groupTotal;
		}
		else {
			end = 0;
		}

		if ((start > 0) && (start > groupTotal)) {
			start -= groupTotal;
		}
		else {
			start = 0;
		}
	}

	assetEntryQuery.setAllCategoryIds(oldAllCategoryIds);
	assetEntryQuery.setEnd(QueryUtil.ALL_POS);
	assetEntryQuery.setStart(QueryUtil.ALL_POS);
		}

		searchContainer.setTotal(total);
	}
	else if (!groupByClass) {
		assetEntryQuery.setClassNameIds(classNameIds);
			if (search != "") {
				end = AssetEntryLocalServiceUtil.getAssetEntriesCount();
			}
			if (PropsValues.ASSET_PUBLISHER_SEARCH_WITH_INDEX
					&& (assetEntryQuery.getLinkedAssetEntryId() == 0)
					&& !portletName
							.equals(PortletKeys.HIGHEST_RATED_ASSETS)
					&& !portletName
							.equals(PortletKeys.MOST_VIEWED_ASSETS)) {
				int inicioList=0;//Debemos iterar siempre sobre la lista completa, posteriormente, se hace un sublist de la misma.
				Hits hits = AssetUtil.search(request, assetEntryQuery,
						inicioList, end);
				total = hits.getLength();
				searchContainer.setTotal(total);
				List<Document> docs = hits.toList();
				List<Document> docsAux = new ArrayList<Document>();
				for (Document d : docs) {
					String articleIdString = d.get(locale, "articleId");
					Long articleId = Long.parseLong(articleIdString);

					JournalArticle article = JournalArticleLocalServiceUtil
							.getArticle(themeDisplay.getScopeGroupId(),
									articleIdString);
					com.liferay.portal.kernel.xml.Document document = null;
					document = SAXReaderUtil.read(article
							.getContentByLocale(locale.toString()));
					if (document.getStringValue().toUpperCase()
							.contains(search.toUpperCase()) || article.getTitle().toUpperCase().contains(search.toUpperCase())) {
						docsAux.add(d);
					}
				}
				
				Document[] documentos = docsAux
						.toArray(new Document[docsAux.size()]);
				hits.setDocs(documentos);
			
				hits.setLength(documentos.length);
				total = hits.getLength();
			
				if (search != "") {
			
					totalGeneral = hits.getLength();
			
					int delta2 = searchContainer.getDelta();
					int finalParcial = start+delta2;
					if ((totalGeneral) <= finalParcial) {
						finalParcial = totalGeneral;
					}
					List<Document> sublist = docsAux.subList(start,
							finalParcial);
					Document[] documentossublist = sublist
							.toArray(new Document[sublist.size()]);
					hits.setDocs(documentossublist);
					hits.setLength(documentossublist.length);
					total = delta2;
					if (finalParcial == 0){
						%>

						<div class="alert alert-info" style="clear: both;">
							<c:choose>
								<c:when test="<%= !portletName.equals(PortletKeys.RELATED_ASSETS) %>">
									<liferay-ui:message key="there-are-no-results" />
								</c:when>
								<c:otherwise>
									<liferay-ui:message key="there-are-no-related-assets" />
								</c:otherwise>
							</c:choose>
						</div>

					<%
					}
			
				}

				results = AssetUtil.getAssetEntries(hits);

			} else {
				total = AssetEntryServiceUtil
						.getEntriesCount(assetEntryQuery);

				searchContainer.setTotal(total);

				assetEntryQuery.setEnd(end);
				assetEntryQuery.setStart(start);

				results = AssetEntryServiceUtil
						.getEntries(assetEntryQuery);
			}
			searchContainer.setResults(results);
			request.setAttribute("view.jsp-results", results);
%>

		<c:choose>
			<c:when test="<%= portletDisplayDDMTemplateId > 0 %>">
				<%= PortletDisplayTemplateUtil.renderDDMTemplate(pageContext, portletDisplayDDMTemplateId, results, contextObjects) %>
			</c:when>
			<c:otherwise>
				<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
			</c:otherwise>
		</c:choose>

<%
	}
	else {
		for (long classNameId : classNameIds) {
			long[] oldGroupClassNameIds = assetEntryQuery.getClassNameIds();

			long[] groupClassNameIds = {classNameId};

			assetEntryQuery.setClassNameIds(groupClassNameIds);

			String groupClassName = PortalUtil.getClassName(classNameId);

			AssetRendererFactory groupAssetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassName(groupClassName);

			int groupTotal = 0;

			if (PropsValues.ASSET_PUBLISHER_SEARCH_WITH_INDEX && (assetEntryQuery.getLinkedAssetEntryId() == 0) && !portletName.equals(PortletKeys.HIGHEST_RATED_ASSETS) && !portletName.equals(PortletKeys.MOST_VIEWED_ASSETS)) {
				Hits hits = AssetUtil.search(request, assetEntryQuery, start, end);

				groupTotal = hits.getLength();

				total += groupTotal;

				results = AssetUtil.getAssetEntries(hits);
			}
			else {
				groupTotal = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

				total += groupTotal;

				assetEntryQuery.setEnd(end);
				assetEntryQuery.setStart(start);

				results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
			}

			searchContainer.setResults(results);

			request.setAttribute("view.jsp-results", results);

			if (!results.isEmpty() && (start < groupTotal)) {
%>

				<h3 class="asset-entries-group-label"><%= ResourceActionsUtil.getModelResource(locale, groupAssetRendererFactory.getClassName()) %></h3>

				<c:choose>
					<c:when test="<%= portletDisplayDDMTemplateId > 0 %>">
						<%= PortletDisplayTemplateUtil.renderDDMTemplate(pageContext, portletDisplayDDMTemplateId, results, contextObjects) %>
					</c:when>
					<c:otherwise>
						<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_asset.jspf" %>
					</c:otherwise>
				</c:choose>

<%
			}

			if (!portletName.equals(PortletKeys.RECENT_CONTENT)) {
				if (groupTotal > 0) {
					if ((end > 0) && (end > groupTotal)) {
						end -= groupTotal;
					}
					else {
						end = 0;
					}

					if ((start > 0) && (start > groupTotal)) {
						start -= groupTotal;
					}
					else {
						start = 0;
					}
				}

				assetEntryQuery.setClassNameIds(oldGroupClassNameIds);
				assetEntryQuery.setEnd(QueryUtil.ALL_POS);
				assetEntryQuery.setStart(QueryUtil.ALL_POS);
			}
		}

		searchContainer.setTotal(total);
	}
	
}

if ((total == 0) && (portletDisplayDDMTemplateId == 0)) {
	if (!showPortletWithNoResults && ((addPortletURLs == null) || addPortletURLs.isEmpty()) && !((assetCategoryId > 0) || Validator.isNotNull(assetTagName))) {
		renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
	}
%>

	<div class="alert alert-info">
		<c:choose>
			<c:when test="<%= !portletName.equals(PortletKeys.RELATED_ASSETS) %>">
				<liferay-ui:message key="there-are-no-results" />
			</c:when>
			<c:otherwise>
				<liferay-ui:message key="there-are-no-related-assets" />
			</c:otherwise>
		</c:choose>
	</div>

<%
}
%>