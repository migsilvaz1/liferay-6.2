package com.gfi.chg.model.impl;

import com.gfi.chg.model.Tracing;
import com.gfi.chg.model.TracingModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Tracing service. Represents a row in the &quot;chg_Tracing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.gfi.chg.model.TracingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TracingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TracingImpl
 * @see com.gfi.chg.model.Tracing
 * @see com.gfi.chg.model.TracingModel
 * @generated
 */
public class TracingModelImpl extends BaseModelImpl<Tracing>
    implements TracingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a tracing model instance should use the {@link com.gfi.chg.model.Tracing} interface instead.
     */
    public static final String TABLE_NAME = "chg_Tracing";
    public static final Object[][] TABLE_COLUMNS = {
            { "tracingId", Types.BIGINT },
            { "areaId", Types.BIGINT },
            { "contactId", Types.BIGINT },
            { "status", Types.INTEGER },
            { "modifiedDate", Types.TIMESTAMP },
            { "comment_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table chg_Tracing (tracingId LONG not null primary key,areaId LONG,contactId LONG,status INTEGER,modifiedDate DATE null,comment_ VARCHAR(250) null)";
    public static final String TABLE_SQL_DROP = "drop table chg_Tracing";
    public static final String ORDER_BY_JPQL = " ORDER BY tracing.tracingId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY chg_Tracing.tracingId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.gfi.chg.model.Tracing"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.gfi.chg.model.Tracing"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.gfi.chg.model.Tracing"),
            true);
    public static long AREAID_COLUMN_BITMASK = 1L;
    public static long CONTACTID_COLUMN_BITMASK = 2L;
    public static long TRACINGID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.gfi.chg.model.Tracing"));
    private static ClassLoader _classLoader = Tracing.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Tracing.class
        };
    private long _tracingId;
    private long _areaId;
    private long _originalAreaId;
    private boolean _setOriginalAreaId;
    private long _contactId;
    private long _originalContactId;
    private boolean _setOriginalContactId;
    private int _status;
    private Date _modifiedDate;
    private String _comment;
    private long _columnBitmask;
    private Tracing _escapedModel;

    public TracingModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _tracingId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTracingId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _tracingId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Tracing.class;
    }

    @Override
    public String getModelClassName() {
        return Tracing.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("tracingId", getTracingId());
        attributes.put("areaId", getAreaId());
        attributes.put("contactId", getContactId());
        attributes.put("status", getStatus());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("comment", getComment());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long tracingId = (Long) attributes.get("tracingId");

        if (tracingId != null) {
            setTracingId(tracingId);
        }

        Long areaId = (Long) attributes.get("areaId");

        if (areaId != null) {
            setAreaId(areaId);
        }

        Long contactId = (Long) attributes.get("contactId");

        if (contactId != null) {
            setContactId(contactId);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String comment = (String) attributes.get("comment");

        if (comment != null) {
            setComment(comment);
        }
    }

    @Override
    public long getTracingId() {
        return _tracingId;
    }

    @Override
    public void setTracingId(long tracingId) {
        _tracingId = tracingId;
    }

    @Override
    public long getAreaId() {
        return _areaId;
    }

    @Override
    public void setAreaId(long areaId) {
        _columnBitmask |= AREAID_COLUMN_BITMASK;

        if (!_setOriginalAreaId) {
            _setOriginalAreaId = true;

            _originalAreaId = _areaId;
        }

        _areaId = areaId;
    }

    public long getOriginalAreaId() {
        return _originalAreaId;
    }

    @Override
    public long getContactId() {
        return _contactId;
    }

    @Override
    public void setContactId(long contactId) {
        _columnBitmask |= CONTACTID_COLUMN_BITMASK;

        if (!_setOriginalContactId) {
            _setOriginalContactId = true;

            _originalContactId = _contactId;
        }

        _contactId = contactId;
    }

    public long getOriginalContactId() {
        return _originalContactId;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getComment() {
        if (_comment == null) {
            return StringPool.BLANK;
        } else {
            return _comment;
        }
    }

    @Override
    public void setComment(String comment) {
        _comment = comment;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Tracing.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Tracing toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Tracing) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TracingImpl tracingImpl = new TracingImpl();

        tracingImpl.setTracingId(getTracingId());
        tracingImpl.setAreaId(getAreaId());
        tracingImpl.setContactId(getContactId());
        tracingImpl.setStatus(getStatus());
        tracingImpl.setModifiedDate(getModifiedDate());
        tracingImpl.setComment(getComment());

        tracingImpl.resetOriginalValues();

        return tracingImpl;
    }

    @Override
    public int compareTo(Tracing tracing) {
        long primaryKey = tracing.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Tracing)) {
            return false;
        }

        Tracing tracing = (Tracing) obj;

        long primaryKey = tracing.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TracingModelImpl tracingModelImpl = this;

        tracingModelImpl._originalAreaId = tracingModelImpl._areaId;

        tracingModelImpl._setOriginalAreaId = false;

        tracingModelImpl._originalContactId = tracingModelImpl._contactId;

        tracingModelImpl._setOriginalContactId = false;

        tracingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Tracing> toCacheModel() {
        TracingCacheModel tracingCacheModel = new TracingCacheModel();

        tracingCacheModel.tracingId = getTracingId();

        tracingCacheModel.areaId = getAreaId();

        tracingCacheModel.contactId = getContactId();

        tracingCacheModel.status = getStatus();

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            tracingCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            tracingCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        tracingCacheModel.comment = getComment();

        String comment = tracingCacheModel.comment;

        if ((comment != null) && (comment.length() == 0)) {
            tracingCacheModel.comment = null;
        }

        return tracingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{tracingId=");
        sb.append(getTracingId());
        sb.append(", areaId=");
        sb.append(getAreaId());
        sb.append(", contactId=");
        sb.append(getContactId());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", comment=");
        sb.append(getComment());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.gfi.chg.model.Tracing");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>tracingId</column-name><column-value><![CDATA[");
        sb.append(getTracingId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>areaId</column-name><column-value><![CDATA[");
        sb.append(getAreaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contactId</column-name><column-value><![CDATA[");
        sb.append(getContactId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comment</column-name><column-value><![CDATA[");
        sb.append(getComment());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
