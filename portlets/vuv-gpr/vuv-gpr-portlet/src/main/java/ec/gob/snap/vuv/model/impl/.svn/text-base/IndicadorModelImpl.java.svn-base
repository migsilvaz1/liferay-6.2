package ec.gob.snap.vuv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ec.gob.snap.vuv.model.Indicador;
import ec.gob.snap.vuv.model.IndicadorModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Indicador service. Represents a row in the &quot;vuv_gpr_service_builder_Indicador&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ec.gob.snap.vuv.model.IndicadorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IndicadorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IndicadorImpl
 * @see ec.gob.snap.vuv.model.Indicador
 * @see ec.gob.snap.vuv.model.IndicadorModel
 * @generated
 */
public class IndicadorModelImpl extends BaseModelImpl<Indicador>
    implements IndicadorModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a indicador model instance should use the {@link ec.gob.snap.vuv.model.Indicador} interface instead.
     */
    public static final String TABLE_NAME = "vuv_gpr_service_builder_Indicador";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_indicador", Types.BIGINT },
            { "id_GPR_indicador", Types.BIGINT },
            { "content", Types.BIGINT },
            { "timeStamp", Types.TIMESTAMP },
            { "id_servicio", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table vuv_gpr_service_builder_Indicador (id_indicador LONG not null primary key,id_GPR_indicador LONG,content LONG,timeStamp DATE null,id_servicio LONG)";
    public static final String TABLE_SQL_DROP = "drop table vuv_gpr_service_builder_Indicador";
    public static final String ORDER_BY_JPQL = " ORDER BY indicador.id_indicador ASC";
    public static final String ORDER_BY_SQL = " ORDER BY vuv_gpr_service_builder_Indicador.id_indicador ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ec.gob.snap.vuv.model.Indicador"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ec.gob.snap.vuv.model.Indicador"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ec.gob.snap.vuv.model.Indicador"));
    private static ClassLoader _classLoader = Indicador.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Indicador.class
        };
    private long _id_indicador;
    private long _id_GPR_indicador;
    private long _content;
    private Date _timeStamp;
    private long _id_servicio;
    private Indicador _escapedModel;

    public IndicadorModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id_indicador;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId_indicador(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id_indicador;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Indicador.class;
    }

    @Override
    public String getModelClassName() {
        return Indicador.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id_indicador", getId_indicador());
        attributes.put("id_GPR_indicador", getId_GPR_indicador());
        attributes.put("content", getContent());
        attributes.put("timeStamp", getTimeStamp());
        attributes.put("id_servicio", getId_servicio());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id_indicador = (Long) attributes.get("id_indicador");

        if (id_indicador != null) {
            setId_indicador(id_indicador);
        }

        Long id_GPR_indicador = (Long) attributes.get("id_GPR_indicador");

        if (id_GPR_indicador != null) {
            setId_GPR_indicador(id_GPR_indicador);
        }

        Long content = (Long) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        Date timeStamp = (Date) attributes.get("timeStamp");

        if (timeStamp != null) {
            setTimeStamp(timeStamp);
        }

        Long id_servicio = (Long) attributes.get("id_servicio");

        if (id_servicio != null) {
            setId_servicio(id_servicio);
        }
    }

    @Override
    public long getId_indicador() {
        return _id_indicador;
    }

    @Override
    public void setId_indicador(long id_indicador) {
        _id_indicador = id_indicador;
    }

    @Override
    public long getId_GPR_indicador() {
        return _id_GPR_indicador;
    }

    @Override
    public void setId_GPR_indicador(long id_GPR_indicador) {
        _id_GPR_indicador = id_GPR_indicador;
    }

    @Override
    public long getContent() {
        return _content;
    }

    @Override
    public void setContent(long content) {
        _content = content;
    }

    @Override
    public Date getTimeStamp() {
        return _timeStamp;
    }

    @Override
    public void setTimeStamp(Date timeStamp) {
        _timeStamp = timeStamp;
    }

    @Override
    public long getId_servicio() {
        return _id_servicio;
    }

    @Override
    public void setId_servicio(long id_servicio) {
        _id_servicio = id_servicio;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Indicador.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Indicador toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Indicador) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IndicadorImpl indicadorImpl = new IndicadorImpl();

        indicadorImpl.setId_indicador(getId_indicador());
        indicadorImpl.setId_GPR_indicador(getId_GPR_indicador());
        indicadorImpl.setContent(getContent());
        indicadorImpl.setTimeStamp(getTimeStamp());
        indicadorImpl.setId_servicio(getId_servicio());

        indicadorImpl.resetOriginalValues();

        return indicadorImpl;
    }

    @Override
    public int compareTo(Indicador indicador) {
        long primaryKey = indicador.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Indicador)) {
            return false;
        }

        Indicador indicador = (Indicador) obj;

        long primaryKey = indicador.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Indicador> toCacheModel() {
        IndicadorCacheModel indicadorCacheModel = new IndicadorCacheModel();

        indicadorCacheModel.id_indicador = getId_indicador();

        indicadorCacheModel.id_GPR_indicador = getId_GPR_indicador();

        indicadorCacheModel.content = getContent();

        Date timeStamp = getTimeStamp();

        if (timeStamp != null) {
            indicadorCacheModel.timeStamp = timeStamp.getTime();
        } else {
            indicadorCacheModel.timeStamp = Long.MIN_VALUE;
        }

        indicadorCacheModel.id_servicio = getId_servicio();

        return indicadorCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id_indicador=");
        sb.append(getId_indicador());
        sb.append(", id_GPR_indicador=");
        sb.append(getId_GPR_indicador());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", timeStamp=");
        sb.append(getTimeStamp());
        sb.append(", id_servicio=");
        sb.append(getId_servicio());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("ec.gob.snap.vuv.model.Indicador");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id_indicador</column-name><column-value><![CDATA[");
        sb.append(getId_indicador());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id_GPR_indicador</column-name><column-value><![CDATA[");
        sb.append(getId_GPR_indicador());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>timeStamp</column-name><column-value><![CDATA[");
        sb.append(getTimeStamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id_servicio</column-name><column-value><![CDATA[");
        sb.append(getId_servicio());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
