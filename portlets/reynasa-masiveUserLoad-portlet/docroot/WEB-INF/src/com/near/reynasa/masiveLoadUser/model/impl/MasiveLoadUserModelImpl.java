/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.near.reynasa.masiveLoadUser.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.near.reynasa.masiveLoadUser.model.MasiveLoadUser;
import com.near.reynasa.masiveLoadUser.model.MasiveLoadUserModel;
import com.near.reynasa.masiveLoadUser.model.MasiveLoadUserSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MasiveLoadUser service. Represents a row in the &quot;reynasa_MasiveLoadUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.near.reynasa.masiveLoadUser.model.MasiveLoadUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MasiveLoadUserImpl}.
 * </p>
 *
 * @author near
 * @see MasiveLoadUserImpl
 * @see com.near.reynasa.masiveLoadUser.model.MasiveLoadUser
 * @see com.near.reynasa.masiveLoadUser.model.MasiveLoadUserModel
 * @generated
 */
@JSON(strict = true)
public class MasiveLoadUserModelImpl extends BaseModelImpl<MasiveLoadUser>
	implements MasiveLoadUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a masive load user model instance should use the {@link com.near.reynasa.masiveLoadUser.model.MasiveLoadUser} interface instead.
	 */
	public static final String TABLE_NAME = "reynasa_MasiveLoadUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "successFile", Types.BIGINT },
			{ "errorFile", Types.BIGINT },
			{ "statusExecution", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table reynasa_MasiveLoadUser (id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,successFile LONG,errorFile LONG,statusExecution INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table reynasa_MasiveLoadUser";
	public static final String ORDER_BY_JPQL = " ORDER BY masiveLoadUser.companyId ASC, masiveLoadUser.groupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY reynasa_MasiveLoadUser.companyId ASC, reynasa_MasiveLoadUser.groupId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.near.reynasa.masiveLoadUser.model.MasiveLoadUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.near.reynasa.masiveLoadUser.model.MasiveLoadUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.near.reynasa.masiveLoadUser.model.MasiveLoadUser"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MasiveLoadUser toModel(MasiveLoadUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MasiveLoadUser model = new MasiveLoadUserImpl();

		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setSuccessFile(soapModel.getSuccessFile());
		model.setErrorFile(soapModel.getErrorFile());
		model.setStatusExecution(soapModel.getStatusExecution());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MasiveLoadUser> toModels(MasiveLoadUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MasiveLoadUser> models = new ArrayList<MasiveLoadUser>(soapModels.length);

		for (MasiveLoadUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.near.reynasa.masiveLoadUser.model.MasiveLoadUser"));

	public MasiveLoadUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MasiveLoadUser.class;
	}

	@Override
	public String getModelClassName() {
		return MasiveLoadUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("successFile", getSuccessFile());
		attributes.put("errorFile", getErrorFile());
		attributes.put("statusExecution", getStatusExecution());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long successFile = (Long)attributes.get("successFile");

		if (successFile != null) {
			setSuccessFile(successFile);
		}

		Long errorFile = (Long)attributes.get("errorFile");

		if (errorFile != null) {
			setErrorFile(errorFile);
		}

		Integer statusExecution = (Integer)attributes.get("statusExecution");

		if (statusExecution != null) {
			setStatusExecution(statusExecution);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask = -1L;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask = -1L;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getSuccessFile() {
		return _successFile;
	}

	@Override
	public void setSuccessFile(long successFile) {
		_successFile = successFile;
	}

	@JSON
	@Override
	public long getErrorFile() {
		return _errorFile;
	}

	@Override
	public void setErrorFile(long errorFile) {
		_errorFile = errorFile;
	}

	@JSON
	@Override
	public int getStatusExecution() {
		return _statusExecution;
	}

	@Override
	public void setStatusExecution(int statusExecution) {
		_statusExecution = statusExecution;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MasiveLoadUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MasiveLoadUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MasiveLoadUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MasiveLoadUserImpl masiveLoadUserImpl = new MasiveLoadUserImpl();

		masiveLoadUserImpl.setId(getId());
		masiveLoadUserImpl.setGroupId(getGroupId());
		masiveLoadUserImpl.setCompanyId(getCompanyId());
		masiveLoadUserImpl.setUserId(getUserId());
		masiveLoadUserImpl.setUserName(getUserName());
		masiveLoadUserImpl.setCreateDate(getCreateDate());
		masiveLoadUserImpl.setSuccessFile(getSuccessFile());
		masiveLoadUserImpl.setErrorFile(getErrorFile());
		masiveLoadUserImpl.setStatusExecution(getStatusExecution());

		masiveLoadUserImpl.resetOriginalValues();

		return masiveLoadUserImpl;
	}

	@Override
	public int compareTo(MasiveLoadUser masiveLoadUser) {
		int value = 0;

		if (getCompanyId() < masiveLoadUser.getCompanyId()) {
			value = -1;
		}
		else if (getCompanyId() > masiveLoadUser.getCompanyId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getGroupId() < masiveLoadUser.getGroupId()) {
			value = -1;
		}
		else if (getGroupId() > masiveLoadUser.getGroupId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MasiveLoadUser)) {
			return false;
		}

		MasiveLoadUser masiveLoadUser = (MasiveLoadUser)obj;

		long primaryKey = masiveLoadUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MasiveLoadUserModelImpl masiveLoadUserModelImpl = this;

		masiveLoadUserModelImpl._originalGroupId = masiveLoadUserModelImpl._groupId;

		masiveLoadUserModelImpl._setOriginalGroupId = false;

		masiveLoadUserModelImpl._originalCompanyId = masiveLoadUserModelImpl._companyId;

		masiveLoadUserModelImpl._setOriginalCompanyId = false;

		masiveLoadUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MasiveLoadUser> toCacheModel() {
		MasiveLoadUserCacheModel masiveLoadUserCacheModel = new MasiveLoadUserCacheModel();

		masiveLoadUserCacheModel.id = getId();

		masiveLoadUserCacheModel.groupId = getGroupId();

		masiveLoadUserCacheModel.companyId = getCompanyId();

		masiveLoadUserCacheModel.userId = getUserId();

		masiveLoadUserCacheModel.userName = getUserName();

		String userName = masiveLoadUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			masiveLoadUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			masiveLoadUserCacheModel.createDate = createDate.getTime();
		}
		else {
			masiveLoadUserCacheModel.createDate = Long.MIN_VALUE;
		}

		masiveLoadUserCacheModel.successFile = getSuccessFile();

		masiveLoadUserCacheModel.errorFile = getErrorFile();

		masiveLoadUserCacheModel.statusExecution = getStatusExecution();

		return masiveLoadUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", successFile=");
		sb.append(getSuccessFile());
		sb.append(", errorFile=");
		sb.append(getErrorFile());
		sb.append(", statusExecution=");
		sb.append(getStatusExecution());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.near.reynasa.masiveLoadUser.model.MasiveLoadUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>successFile</column-name><column-value><![CDATA[");
		sb.append(getSuccessFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorFile</column-name><column-value><![CDATA[");
		sb.append(getErrorFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusExecution</column-name><column-value><![CDATA[");
		sb.append(getStatusExecution());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MasiveLoadUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MasiveLoadUser.class
		};
	private long _id;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private long _successFile;
	private long _errorFile;
	private int _statusExecution;
	private long _columnBitmask;
	private MasiveLoadUser _escapedModel;
}